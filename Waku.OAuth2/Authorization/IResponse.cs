/**
 * https://www.rfc-editor.org/rfc/rfc6749
 *
 * Client Authentication
 */
/**
 * The authorization server MAY establish a client authentication method
   with public clients.  However, the authorization server MUST NOT rely
   on public client authentication for the purpose of identifying the
   client.
 * The client MUST NOT use more than one authentication method in each request.
 */
namespace Waku.OAuth2.Authorization;

/// <summary>
/// <para>
/// OAuth2 Authorization Response.
/// </para>
/// <see href="https://www.rfc-editor.org/rfc/rfc6749#section-4.1.2" />.
/// </summary>
internal interface IResponse
{
    /// <summary>
    /// REQUIRED.
    /// <para>
    /// The authorization code generated by the authorization server.<para />
    /// The authorization code MUST expire shortly after it is issued to mitigate the risk of leaks.<para />
    /// A maximum authorization code lifetime of 10 minutes is RECOMMENDED.<para />
    /// The client MUST NOT use the authorization code more than once.<para />
    /// If an authorization code is used more than once,<para />
    /// the authorization server MUST deny the request and SHOULD revoke(when possible) all tokens previously issued based on that authorization code.
    /// </para>
    /// </summary>
    abstract string Code { get; init; }

    /// <summary>
    /// RECOMMENDED.
    /// <para>
    /// if the "state" parameter was present in the client authorization request.
    /// The exact value received from the client.
    /// </para>
    /// </summary>
    abstract string? State { get; init; }
}